@page "/employees"
@using Business.Employees.Queries.GetEmployeeList
@using System.Net
@inject HttpClient HttpClient
@inject NavigationManager NavigationManager
<a href="/employee/create" class="row mb-4">
    <div class="col-sm-6">
        <button type="button" class="btn btn-primary">Добавить сотрудника</button>
    </div>
</a>

<h3>Список сотрудников</h3>

@if (EmployeesList.Employees == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table table-bordered table-striped" style="width:100%">
        <thead>
        <tr>
            <th>Фамилия</th>
            <th>Имя</th>
            <th>Отчество</th>
            <th>Кнопки управления</th>
        </tr>
        </thead>
        <tbody>
            @foreach (var employee in EmployeesList.Employees)
            {
                <tr>
                    <td>@employee.SecondName</td>
                    <td>@employee.Name</td>
                    <td>@employee.Patronymic</td>
                    <td>
                        <button class="btn btn-warning" @onclick="() => EditEmployee(employee.Id)">Редактировать</button>
                        <button class="btn btn-danger" @onclick="async () => await DeleteEmployee(employee.Id)">Удалить</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    EmployeeListVm EmployeesList = new();

    protected override async Task OnInitializedAsync()
    {
        EmployeesList = await HttpClient.GetFromJsonAsync<EmployeeListVm>("employee");
    }

    private void EditEmployee(string id)
    {
        NavigationManager.NavigateTo($"/employee/edit/{id}");
    }

    private async Task DeleteEmployee(string id)
    {
        var response = await HttpClient.DeleteAsync($"employee/{id}");
        if (response.IsSuccessStatusCode)
        {
            EmployeesList = await HttpClient.GetFromJsonAsync<EmployeeListVm>("employee");
            StateHasChanged();
        }
    }
}
